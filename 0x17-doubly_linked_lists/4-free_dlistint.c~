#include "lists.h"

/**
 * free_dlistint - a function that frees a doubly linked list
 * @head: a pointer to the first node of the doubly linked list
 * Return: void
 */

void free_dlistint(dlistint_t *head)
{
	if (head == NULL)
		return;
	if (head->prev == NULL && head->next == NULL)
	{
		free(head);
		return;
	}
	while (head->prev != NULL)
		head = head->prev;

	while (head->next != NULL)
	{
		printf("free 1\n");
		head = head->next;
		if (head->prev != NULL)
			free(head->prev);
	}
	free(head->prev);
	head->prev = NULL;
	free(head);
}
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "lists.h"

/**
 * main - check the code
 *
 * Return: Always EXIT_SUCCESS.
 */
int main(void)
{
    dlistint_t *head;

    head = NULL;
    add_dnodeint_end(&head, 0);
    add_dnodeint_end(&head, 1);
    add_dnodeint_end(&head, 2);
    add_dnodeint_end(&head, 3);
    add_dnodeint_end(&head, 4);
    add_dnodeint_end(&head, 98);
    add_dnodeint_end(&head, 402);
    add_dnodeint_end(&head, 1024);
    print_dlistint(head);
    free_dlistint(head);
    head = NULL;
    return (EXIT_SUCCESS);
}
